{"ast":null,"code":"import axios from \"axios\";\n\n//SIGN IN\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SHOW_LOGIN_ERROR_MESSAGE = 'SHOW_LOGIN_ERROR_MESSAGE'; // Ajout de la constante pour afficher le message d'erreur\n\n//user profile\nexport const GET_USERPROFILE = \"GET_USERPROFILE\";\nexport const USER_PROFILE_SUCCESS = \"USER_PROFILE_SUCCESS\";\nexport const USER_PROFILE_FAIL = \"USER_PROFILE_FAIL\";\n\n//update username\nexport const UPDATE_USERNAME_REQUEST = 'UPDATE_USERNAME_REQUEST';\nexport const UPDATE_USERNAME_SUCCESS = 'UPDATE_USERNAME_SUCCESS';\nexport const UPDATE_USERNAME_FAIL = 'UPDATE_USERNAME_FAIL';\n\n/* Authentication actions */\n\nexport const login = (email, password) => async dispatch => {\n  if (localStorage.getItem('token')) {\n    const hasToken = localStorage.getItem('token');\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: hasToken\n    });\n  } else {\n    try {\n      const response = await axios.post(\"http://localhost:3001/api/v1/user/login\", {\n        email,\n        password\n      });\n      const token = response.data.body.token;\n      console.log(response);\n\n      // Stocker le token dans le local storage\n      localStorage.setItem(\"token\", token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: token\n      });\n    } catch (error) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: error.response.data.message\n      });\n    }\n  }\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};\n\n// Action pour afficher le message d'erreur de connexion\n// export const showLoginErrorMessage = () => ({\n//   type: SHOW_LOGIN_ERROR_MESSAGE,\n// });\n\n// User's profile action\nexport const userProfile = () => async dispatch => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      throw new Error(\"No token found\"); // Lance une erreur si aucun token n'est trouvé\n    }\n    const response = await axios.post(\"http://localhost:3001/api/v1/user/profile\", null, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.data;\n\n    // Récupérer l'ID de l'utilisateur connecté\n    const userId = data.body.id;\n\n    // Stocker l'ID de l'utilisateur dans le local storage\n    localStorage.setItem(\"userId\", userId);\n    dispatch({\n      type: USER_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n/* Username update action */\nexport const updateUserName = userName => async dispatch => {\n  dispatch({\n    type: UPDATE_USERNAME_REQUEST\n  });\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.put('http://localhost:3001/api/v1/user/profile', {\n      userName\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: UPDATE_USERNAME_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USERNAME_FAIL,\n      payload: error.response.data.message || 'Failed to update username'\n    });\n  }\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SHOW_LOGIN_ERROR_MESSAGE","GET_USERPROFILE","USER_PROFILE_SUCCESS","USER_PROFILE_FAIL","UPDATE_USERNAME_REQUEST","UPDATE_USERNAME_SUCCESS","UPDATE_USERNAME_FAIL","login","email","password","dispatch","localStorage","getItem","hasToken","type","payload","response","post","token","data","body","console","log","setItem","error","message","logout","userProfile","Error","headers","Authorization","userId","id","updateUserName","userName","put"],"sources":["/Users/rineralexandre/Desktop/ArgentBankLloyd/frontend/src/redux/actions/all.actions.js"],"sourcesContent":["import axios from \"axios\";\n\n//SIGN IN\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SHOW_LOGIN_ERROR_MESSAGE = 'SHOW_LOGIN_ERROR_MESSAGE'; // Ajout de la constante pour afficher le message d'erreur\n\n//user profile\nexport const GET_USERPROFILE = \"GET_USERPROFILE\";\nexport const USER_PROFILE_SUCCESS = \"USER_PROFILE_SUCCESS\";\nexport const USER_PROFILE_FAIL = \"USER_PROFILE_FAIL\";\n\n//update username\nexport const UPDATE_USERNAME_REQUEST = 'UPDATE_USERNAME_REQUEST';\nexport const UPDATE_USERNAME_SUCCESS = 'UPDATE_USERNAME_SUCCESS';\nexport const UPDATE_USERNAME_FAIL = 'UPDATE_USERNAME_FAIL';\n\n/* Authentication actions */\n\nexport const login = (email, password) => async (dispatch) => {\n  if (localStorage.getItem('token')){\n    const hasToken = localStorage.getItem('token')\n    dispatch({ type: LOGIN_SUCCESS, payload: hasToken });\n  }else{\n    try {\n    \n      const response = await axios.post(\n        \"http://localhost:3001/api/v1/user/login\",\n        { email, password }\n      );\n      const token = response.data.body.token;\n      console.log(response);\n  \n      // Stocker le token dans le local storage\n      localStorage.setItem(\"token\", token);\n  \n      dispatch({ type: LOGIN_SUCCESS, payload: token });\n    } catch (error) {\n      \n      dispatch({ type: LOGIN_FAIL, payload: error.response.data.message });\n  \n    }\n\n  }\n \n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n\n// Action pour afficher le message d'erreur de connexion\n// export const showLoginErrorMessage = () => ({\n//   type: SHOW_LOGIN_ERROR_MESSAGE,\n// });\n\n// User's profile action\nexport const userProfile = () => async (dispatch) => {\n  try {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      throw new Error(\"No token found\"); // Lance une erreur si aucun token n'est trouvé\n    }\n\n    const response = await axios.post(\n      \"http://localhost:3001/api/v1/user/profile\",\n      null,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n\n    const data = await response.data;\n\n    // Récupérer l'ID de l'utilisateur connecté\n    const userId = data.body.id;\n\n    // Stocker l'ID de l'utilisateur dans le local storage\n    localStorage.setItem(\"userId\", userId);\n\n    dispatch({ type: USER_PROFILE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n/* Username update action */\nexport const updateUserName = (userName) => async (dispatch) => {\n  dispatch({ type: UPDATE_USERNAME_REQUEST });\n\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.put(\n      'http://localhost:3001/api/v1/user/profile',\n      { userName },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n\n    dispatch({ type: UPDATE_USERNAME_SUCCESS, payload: response.data });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USERNAME_FAIL,\n      payload: error.response.data.message || 'Failed to update username',\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}