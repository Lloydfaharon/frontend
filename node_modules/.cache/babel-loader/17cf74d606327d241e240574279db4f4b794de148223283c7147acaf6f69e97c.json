{"ast":null,"code":"import axios from \"axios\";\n\n//SIGN IN\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\n//user profile\nexport const GET_USERPROFILE = \"GET_USERPROFILE\";\nexport const USER_PROFILE_SUCCESS = \"USER_PROFILE_SUCCESS\";\nexport const USER_PROFILE_FAIL = \"USER_PROFILE_FAIL\";\n\n//update username\nexport const UPDATE_USERNAME_REQUEST = 'UPDATE_USERNAME_REQUEST';\nexport const UPDATE_USERNAME_SUCCESS = 'UPDATE_USERNAME_SUCCESS';\nexport const UPDATE_USERNAME_FAIL = 'UPDATE_USERNAME_FAIL';\n\n/* Authentication actions */\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    const response = await axios.post(\"http://localhost:3001/api/v1/user/login\", {\n      email,\n      password\n    });\n    const token = response.data.body.token;\n    console.log(response);\n\n    // Stocker le token dans le local storage\n    localStorage.setItem(\"token\", token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: token\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};\n\n// User's profile action\nexport const userProfile = () => async dispatch => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      throw new Error(\"No token found\"); // Lance une erreur si aucun token n'est trouvé\n    }\n    const response = await axios.post(\"http://localhost:3001/api/v1/user/profile\", null, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = response.data;\n\n    // Récupérer l'ID de l'utilisateur connecté\n    const userId = data.body.userId;\n\n    // Stocker l'ID de l'utilisateur dans le local storage\n    localStorage.setItem(\"userId\", userId);\n    dispatch({\n      type: USER_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n/* Username update action */\nexport const updateUserName = userName => async dispatch => {\n  dispatch({\n    type: UPDATE_USERNAME_REQUEST\n  });\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.put('http://localhost:3001/api/v1/user/profile', {\n      userName\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: UPDATE_USERNAME_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USERNAME_FAIL,\n      payload: error.response.data.message || 'Failed to update username'\n    });\n  }\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","GET_USERPROFILE","USER_PROFILE_SUCCESS","USER_PROFILE_FAIL","UPDATE_USERNAME_REQUEST","UPDATE_USERNAME_SUCCESS","UPDATE_USERNAME_FAIL","login","email","password","dispatch","response","post","token","data","body","console","log","localStorage","setItem","type","payload","error","message","logout","userProfile","getItem","Error","headers","Authorization","userId","updateUserName","userName","put"],"sources":["/Users/rineralexandre/Desktop/ArgentBankLloyd/frontend/src/redux/actions/all.actions.js"],"sourcesContent":["import axios from \"axios\";\n\n//SIGN IN\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\n//user profile\nexport const GET_USERPROFILE = \"GET_USERPROFILE\";\nexport const USER_PROFILE_SUCCESS = \"USER_PROFILE_SUCCESS\";\nexport const USER_PROFILE_FAIL = \"USER_PROFILE_FAIL\";\n\n//update username\nexport const UPDATE_USERNAME_REQUEST = 'UPDATE_USERNAME_REQUEST';\nexport const UPDATE_USERNAME_SUCCESS = 'UPDATE_USERNAME_SUCCESS';\nexport const UPDATE_USERNAME_FAIL = 'UPDATE_USERNAME_FAIL';\n\n/* Authentication actions */\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    const response = await axios.post(\n      \"http://localhost:3001/api/v1/user/login\",\n      { email, password }\n    );\n    const token = response.data.body.token;\n    console.log(response);\n\n    // Stocker le token dans le local storage\n    localStorage.setItem(\"token\", token);\n\n\n    dispatch({ type: LOGIN_SUCCESS, payload: token });\n  } catch (error) {\n    dispatch({ type: LOGIN_FAIL, payload: error.response.data.message });\n  }\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n\n// User's profile action\nexport const userProfile = () => async (dispatch) => {\n  try {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      throw new Error(\"No token found\"); // Lance une erreur si aucun token n'est trouvé\n    }\n\n    const response = await axios.post(\n      \"http://localhost:3001/api/v1/user/profile\",\n      null,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n\n    const data = response.data;\n\n    // Récupérer l'ID de l'utilisateur connecté\n    const userId = data.body.userId;\n\n    // Stocker l'ID de l'utilisateur dans le local storage\n    localStorage.setItem(\"userId\", userId);\n\n    dispatch({ type: USER_PROFILE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n\n/* Username update action */\nexport const updateUserName = (userName) => async (dispatch) => {\n  dispatch({ type: UPDATE_USERNAME_REQUEST });\n\n  try {\n    const token = localStorage.getItem('token');\n    const response = await axios.put(\n      'http://localhost:3001/api/v1/user/profile',\n      { userName },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n\n    dispatch({ type: UPDATE_USERNAME_SUCCESS, payload: response.data });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USERNAME_FAIL,\n      payload: error.response.data.message || 'Failed to update username',\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}