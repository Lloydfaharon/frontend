{"ast":null,"code":"import axios from 'axios';\n\n//SIGN IN\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\n//user profile\nexport const GET_USERPROFILE = \"GET_USERPROFILE\";\nexport const EDIT_USERNAME = \"EDIT_USERNAME\";\n\n/* Authentication actions */\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    const response = await axios.post('http://localhost:3001/api/v1/user/login', {\n      email,\n      password\n    });\n    const token = response.data.body.token;\n    console.log(response);\n\n    // Stocker le token dans le local storage\n    sessionStorage.setItem('token', token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: token\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};\n\n/* User data recovery action */\nexport const userProfile = userData => {\n  return {\n    type: GET_USERPROFILE,\n    payload: userData\n  };\n};\n\n/* Username update action */\nexport const updateUsername = username => {\n  return {\n    type: EDIT_USERNAME,\n    payload: username\n  };\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","GET_USERPROFILE","EDIT_USERNAME","login","email","password","dispatch","response","post","token","data","body","console","log","sessionStorage","setItem","type","payload","error","message","logout","userProfile","userData","updateUsername","username"],"sources":["/Users/rineralexandre/Desktop/ArgentBankLloyd/frontend/src/redux/actions/login.actions.js"],"sourcesContent":["import axios from 'axios';\n\n//SIGN IN\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\n//user profile\nexport const GET_USERPROFILE = \"GET_USERPROFILE\"\nexport const EDIT_USERNAME = \"EDIT_USERNAME\"\n\n\n\n/* Authentication actions */\n\nexport const login = (email, password) => async (dispatch) => {\n  \n    try {\n      const response = await axios.post('http://localhost:3001/api/v1/user/login', { email, password });\n      const token = response.data.body.token;\n      console.log(response)\n\n       // Stocker le token dans le local storage\n       sessionStorage.setItem('token',token);\n\n      dispatch({ type: LOGIN_SUCCESS, payload: token });\n    } catch (error) {\n        \n      dispatch({ type: LOGIN_FAIL, payload: error.response.data.message });\n    }\n  };\n  \n  export const logout = () => {\n    return {\n      type: LOGOUT,\n    };\n  };\n\n\n/* User data recovery action */\nexport const userProfile = (userData) => {\n    return {\n        type: GET_USERPROFILE,\n        payload: userData,\n    }\n}\n\n/* Username update action */\nexport const updateUsername = (username) => {\n    return {\n        type: EDIT_USERNAME,\n        payload: username,\n    }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,MAAM,GAAG,QAAQ;;AAE9B;AACA,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,MAAMC,aAAa,GAAG,eAAe;;AAI5C;;AAEA,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAE1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,yCAAyC,EAAE;MAAEJ,KAAK;MAAEC;IAAS,CAAC,CAAC;IACjG,MAAMI,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACF,KAAK;IACtCG,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;;IAEpB;IACAO,cAAc,CAACC,OAAO,CAAC,OAAO,EAACN,KAAK,CAAC;IAEtCH,QAAQ,CAAC;MAAEU,IAAI,EAAElB,aAAa;MAAEmB,OAAO,EAAER;IAAM,CAAC,CAAC;EACnD,CAAC,CAAC,OAAOS,KAAK,EAAE;IAEdZ,QAAQ,CAAC;MAAEU,IAAI,EAAEjB,UAAU;MAAEkB,OAAO,EAAEC,KAAK,CAACX,QAAQ,CAACG,IAAI,CAACS;IAAQ,CAAC,CAAC;EACtE;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAO;IACLJ,IAAI,EAAEhB;EACR,CAAC;AACH,CAAC;;AAGH;AACA,OAAO,MAAMqB,WAAW,GAAIC,QAAQ,IAAK;EACrC,OAAO;IACHN,IAAI,EAAEf,eAAe;IACrBgB,OAAO,EAAEK;EACb,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EACxC,OAAO;IACHR,IAAI,EAAEd,aAAa;IACnBe,OAAO,EAAEO;EACb,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}